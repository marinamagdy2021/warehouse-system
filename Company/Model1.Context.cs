//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Company
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CompanyMarketEntities : DbContext
    {
        public CompanyMarketEntities()
            : base("name=CompanyMarketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Export_Quantity> Export_Quantity { get; set; }
        public virtual DbSet<Import_Quantity> Import_Quantity { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Item_Measure> Item_Measure { get; set; }
        public virtual DbSet<item_WareHouse> item_WareHouse { get; set; }
        public virtual DbSet<Move_To> Move_To { get; set; }
        public virtual DbSet<Permetion_Export> Permetion_Export { get; set; }
        public virtual DbSet<Permetion_Import> Permetion_Import { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<WareHouse> WareHouses { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<AboutToExpire_Result> AboutToExpire(Nullable<int> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AboutToExpire_Result>("AboutToExpire", periodParameter);
        }
    
        public virtual ObjectResult<Movement_Result> Movement(Nullable<System.DateTime> a1, Nullable<System.DateTime> a2)
        {
            var a1Parameter = a1.HasValue ?
                new ObjectParameter("A1", a1) :
                new ObjectParameter("A1", typeof(System.DateTime));
    
            var a2Parameter = a2.HasValue ?
                new ObjectParameter("A2", a2) :
                new ObjectParameter("A2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Movement_Result>("Movement", a1Parameter, a2Parameter);
        }
    
        public virtual ObjectResult<string> ProductInfo(string i_NM)
        {
            var i_NMParameter = i_NM != null ?
                new ObjectParameter("I_NM", i_NM) :
                new ObjectParameter("I_NM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductInfo", i_NMParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> productsAfterDate(Nullable<int> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("productsAfterDate", periodParameter);
        }
    
        public virtual ObjectResult<string> WHInfo(Nullable<int> i_code)
        {
            var i_codeParameter = i_code.HasValue ?
                new ObjectParameter("I_code", i_code) :
                new ObjectParameter("I_code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WHInfo", i_codeParameter);
        }
    
        public virtual ObjectResult<GetWHInfo_Result> GetWHInfo(string wH_NM)
        {
            var wH_NMParameter = wH_NM != null ?
                new ObjectParameter("WH_NM", wH_NM) :
                new ObjectParameter("WH_NM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWHInfo_Result>("GetWHInfo", wH_NMParameter);
        }
    
        public virtual ObjectResult<ProductInfor_Result> ProductInfor(string i_NM)
        {
            var i_NMParameter = i_NM != null ?
                new ObjectParameter("I_NM", i_NM) :
                new ObjectParameter("I_NM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductInfor_Result>("ProductInfor", i_NMParameter);
        }
    
        public virtual ObjectResult<AboutToExpire2_Result> AboutToExpire2(Nullable<int> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AboutToExpire2_Result>("AboutToExpire2", periodParameter);
        }
    
        public virtual ObjectResult<AboutToExpiree_Result> AboutToExpiree(Nullable<int> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AboutToExpiree_Result>("AboutToExpiree", periodParameter);
        }
    
        public virtual ObjectResult<R4_Result> R4(Nullable<int> time_interval_months)
        {
            var time_interval_monthsParameter = time_interval_months.HasValue ?
                new ObjectParameter("time_interval_months", time_interval_months) :
                new ObjectParameter("time_interval_months", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<R4_Result>("R4", time_interval_monthsParameter);
        }
    
        public virtual ObjectResult<R5_Result> R5(Nullable<int> time_interval_in_Months)
        {
            var time_interval_in_MonthsParameter = time_interval_in_Months.HasValue ?
                new ObjectParameter("time_interval_in_Months", time_interval_in_Months) :
                new ObjectParameter("time_interval_in_Months", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<R5_Result>("R5", time_interval_in_MonthsParameter);
        }
    
        public virtual ObjectResult<zzz_Result> zzz(Nullable<int> period)
        {
            var periodParameter = period.HasValue ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<zzz_Result>("zzz", periodParameter);
        }
    }
}
